plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'com.jfrog.bintray' version '1.8.5' apply false
}

allprojects {
    group = 'org.radarbase'
    version = '0.4.1-SNAPSHOT'

    ext {
        jerseyVersion = "2.32"
        grizzlyVersion = "2.4.4"
        okhttpVersion = "4.9.0"
        junitVersion = "5.7.0"
    }
}

description = 'Library for Jersey authorization, exception handling and configuration with the RADAR platform'

ext {
    githubRepoName = 'RADAR-base/radar-jersey'
    githubUrl = "https://github.com/${githubRepoName}.git".toString()
    issueUrl = "https://github.com/$githubRepoName/issues".toString()
    website = 'http://radar-base.org'

    hk2Version = "2.6.1"
    managementPortalVersion = "0.6.0"
    jakartaWsRsVersion = "2.1.6"
    jakartaAnnotationVersion = "1.3.5"
    jacksonVersion = "2.11.3"
    jacksonModuleVersion = "2.11.3"
    slf4jVersion = "1.7.30"
    javaxXmlBindVersion = "2.3.1"
    javaxJaxbCoreVersion = "2.3.0.1"
    javaxJaxbRuntimeVersion = "2.3.3"
    javaxActivation = "1.1.1"
}

repositories {
    jcenter()
    maven { url = "https://dl.bintray.com/radar-cns/org.radarcns" }
    maven { url = "https://repo.thehyve.nl/content/repositories/snapshots" }
}

dependencies {
    api("org.radarcns:radar-auth:$managementPortalVersion")

    api("jakarta.ws.rs:jakarta.ws.rs-api:$jakartaWsRsVersion")
    api("jakarta.annotation:jakarta.annotation-api:$jakartaAnnotationVersion")
    api("org.glassfish.hk2.external:jakarta.inject:$hk2Version")
    api("org.glassfish.jersey.core:jersey-server:$jerseyVersion")

    api("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")

    implementation("com.squareup.okhttp3:okhttp:$okhttpVersion")

    implementation("org.glassfish.jersey.containers:jersey-container-grizzly2-http:$jerseyVersion")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonModuleVersion")

    // exception template rendering
    implementation 'com.github.spullara.mustache.java:compiler:0.9.6'

    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"

    api("org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion")

    runtimeOnly("org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion")

    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonModuleVersion")
    runtimeOnly("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonModuleVersion")
    runtimeOnly("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonModuleVersion")

    runtimeOnly "javax.xml.bind:jaxb-api:$javaxXmlBindVersion"
    runtimeOnly "org.glassfish.jaxb:jaxb-core:$javaxJaxbCoreVersion"
    runtimeOnly "org.glassfish.jaxb:jaxb-runtime:$javaxJaxbRuntimeVersion"
    runtimeOnly "javax.activation:activation:$javaxActivation"

    testRuntimeOnly("org.glassfish.grizzly:grizzly-http-server:$grizzlyVersion")
    testRuntimeOnly("org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:$jerseyVersion")

    testImplementation("org.junit.jupiter:junit-jupiter:$junitVersion")
    testImplementation 'org.hamcrest:hamcrest-all:1.3'

    testRuntimeOnly("ch.qos.logback:logback-classic:1.2.3")
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
        apiVersion = "1.4"
        languageVersion = "1.4"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
}

wrapper {
    gradleVersion = "6.6.1"
}

apply from: "gradle/publishing.gradle"
